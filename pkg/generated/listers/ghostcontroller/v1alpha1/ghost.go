/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/somi3k/ghost-operator/pkg/apis/ghostcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GhostLister helps list Ghosts.
type GhostLister interface {
	// List lists all Ghosts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Ghost, err error)
	// Ghosts returns an object that can list and get Ghosts.
	Ghosts(namespace string) GhostNamespaceLister
	GhostListerExpansion
}

// ghostLister implements the GhostLister interface.
type ghostLister struct {
	indexer cache.Indexer
}

// NewGhostLister returns a new GhostLister.
func NewGhostLister(indexer cache.Indexer) GhostLister {
	return &ghostLister{indexer: indexer}
}

// List lists all Ghosts in the indexer.
func (s *ghostLister) List(selector labels.Selector) (ret []*v1alpha1.Ghost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ghost))
	})
	return ret, err
}

// Ghosts returns an object that can list and get Ghosts.
func (s *ghostLister) Ghosts(namespace string) GhostNamespaceLister {
	return ghostNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GhostNamespaceLister helps list and get Ghosts.
type GhostNamespaceLister interface {
	// List lists all Ghosts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Ghost, err error)
	// Get retrieves the Ghost from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Ghost, error)
	GhostNamespaceListerExpansion
}

// ghostNamespaceLister implements the GhostNamespaceLister
// interface.
type ghostNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ghosts in the indexer for a given namespace.
func (s ghostNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ghost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ghost))
	})
	return ret, err
}

// Get retrieves the Ghost from the indexer for a given namespace and name.
func (s ghostNamespaceLister) Get(name string) (*v1alpha1.Ghost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ghost"), name)
	}
	return obj.(*v1alpha1.Ghost), nil
}
